//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ECX.Attendance.UI.ECXSecurityAccess {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ECXSecurityAccessSoap", Namespace="http://tempuri.org/")]
    public partial class ECXSecurityAccess : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetActiveApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasRightOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasRightsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserHasApplicationAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserHasApplicationsAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAuditTrailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAuditTrailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuditTrailCommitOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuditTrailRollbackOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAuthenticatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserHasLocationAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersWithRightOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ECXSecurityAccess() {
            this.Url = global::ECX.Attendance.UI.Properties.Settings.Default.ECX_Attendance_UI_ECXSecurityAccess_ECXSecurityAccess;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetActiveApplicationsCompletedEventHandler GetActiveApplicationsCompleted;
        
        /// <remarks/>
        public event HasRightCompletedEventHandler HasRightCompleted;
        
        /// <remarks/>
        public event HasRightsCompletedEventHandler HasRightsCompleted;
        
        /// <remarks/>
        public event UserHasApplicationAccessCompletedEventHandler UserHasApplicationAccessCompleted;
        
        /// <remarks/>
        public event UserHasApplicationsAccessCompletedEventHandler UserHasApplicationsAccessCompleted;
        
        /// <remarks/>
        public event AddAuditTrailCompletedEventHandler AddAuditTrailCompleted;
        
        /// <remarks/>
        public event AddAuditTrailsCompletedEventHandler AddAuditTrailsCompleted;
        
        /// <remarks/>
        public event AuditTrailCommitCompletedEventHandler AuditTrailCommitCompleted;
        
        /// <remarks/>
        public event AuditTrailRollbackCompletedEventHandler AuditTrailRollbackCompleted;
        
        /// <remarks/>
        public event IsAuthenticatedCompletedEventHandler IsAuthenticatedCompleted;
        
        /// <remarks/>
        public event UserHasLocationAccessCompletedEventHandler UserHasLocationAccessCompleted;
        
        /// <remarks/>
        public event UsersWithRightCompletedEventHandler UsersWithRightCompleted;
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveApplications", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CApplication[] GetActiveApplications() {
            object[] results = this.Invoke("GetActiveApplications", new object[0]);
            return ((CApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveApplicationsAsync() {
            this.GetActiveApplicationsAsync(null);
        }
        
        /// <remarks/>
        public void GetActiveApplicationsAsync(object userState) {
            if ((this.GetActiveApplicationsOperationCompleted == null)) {
                this.GetActiveApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetActiveApplications", new object[0], this.GetActiveApplicationsOperationCompleted, userState);
        }
        
        private void OnGetActiveApplicationsOperationCompleted(object arg) {
            if ((this.GetActiveApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveApplicationsCompleted(this, new GetActiveApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasRight", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float HasRight(System.Guid UserGuid, string Code, string LocationCode) {
            object[] results = this.Invoke("HasRight", new object[] {
                        UserGuid,
                        Code,
                        LocationCode});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void HasRightAsync(System.Guid UserGuid, string Code, string LocationCode) {
            this.HasRightAsync(UserGuid, Code, LocationCode, null);
        }
        
        /// <remarks/>
        public void HasRightAsync(System.Guid UserGuid, string Code, string LocationCode, object userState) {
            if ((this.HasRightOperationCompleted == null)) {
                this.HasRightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasRightOperationCompleted);
            }
            this.InvokeAsync("HasRight", new object[] {
                        UserGuid,
                        Code,
                        LocationCode}, this.HasRightOperationCompleted, userState);
        }
        
        private void OnHasRightOperationCompleted(object arg) {
            if ((this.HasRightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasRightCompleted(this, new HasRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasRights", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float[] HasRights(System.Guid UserGuid, string[] Code, string LocationCode) {
            object[] results = this.Invoke("HasRights", new object[] {
                        UserGuid,
                        Code,
                        LocationCode});
            return ((float[])(results[0]));
        }
        
        /// <remarks/>
        public void HasRightsAsync(System.Guid UserGuid, string[] Code, string LocationCode) {
            this.HasRightsAsync(UserGuid, Code, LocationCode, null);
        }
        
        /// <remarks/>
        public void HasRightsAsync(System.Guid UserGuid, string[] Code, string LocationCode, object userState) {
            if ((this.HasRightsOperationCompleted == null)) {
                this.HasRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasRightsOperationCompleted);
            }
            this.InvokeAsync("HasRights", new object[] {
                        UserGuid,
                        Code,
                        LocationCode}, this.HasRightsOperationCompleted, userState);
        }
        
        private void OnHasRightsOperationCompleted(object arg) {
            if ((this.HasRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasRightsCompleted(this, new HasRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserHasApplicationAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserHasApplicationAccess(System.Guid UserGuid, string ApplicationCode) {
            object[] results = this.Invoke("UserHasApplicationAccess", new object[] {
                        UserGuid,
                        ApplicationCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserHasApplicationAccessAsync(System.Guid UserGuid, string ApplicationCode) {
            this.UserHasApplicationAccessAsync(UserGuid, ApplicationCode, null);
        }
        
        /// <remarks/>
        public void UserHasApplicationAccessAsync(System.Guid UserGuid, string ApplicationCode, object userState) {
            if ((this.UserHasApplicationAccessOperationCompleted == null)) {
                this.UserHasApplicationAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserHasApplicationAccessOperationCompleted);
            }
            this.InvokeAsync("UserHasApplicationAccess", new object[] {
                        UserGuid,
                        ApplicationCode}, this.UserHasApplicationAccessOperationCompleted, userState);
        }
        
        private void OnUserHasApplicationAccessOperationCompleted(object arg) {
            if ((this.UserHasApplicationAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserHasApplicationAccessCompleted(this, new UserHasApplicationAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserHasApplicationsAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool[] UserHasApplicationsAccess(System.Guid UserGuid, string[] ApplicationCode) {
            object[] results = this.Invoke("UserHasApplicationsAccess", new object[] {
                        UserGuid,
                        ApplicationCode});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void UserHasApplicationsAccessAsync(System.Guid UserGuid, string[] ApplicationCode) {
            this.UserHasApplicationsAccessAsync(UserGuid, ApplicationCode, null);
        }
        
        /// <remarks/>
        public void UserHasApplicationsAccessAsync(System.Guid UserGuid, string[] ApplicationCode, object userState) {
            if ((this.UserHasApplicationsAccessOperationCompleted == null)) {
                this.UserHasApplicationsAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserHasApplicationsAccessOperationCompleted);
            }
            this.InvokeAsync("UserHasApplicationsAccess", new object[] {
                        UserGuid,
                        ApplicationCode}, this.UserHasApplicationsAccessOperationCompleted, userState);
        }
        
        private void OnUserHasApplicationsAccessOperationCompleted(object arg) {
            if ((this.UserHasApplicationsAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserHasApplicationsAccessCompleted(this, new UserHasApplicationsAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAuditTrail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAuditTrail(string ModuleCode, System.Guid UserGuid, string OldValue, string NewValue) {
            object[] results = this.Invoke("AddAuditTrail", new object[] {
                        ModuleCode,
                        UserGuid,
                        OldValue,
                        NewValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAuditTrailAsync(string ModuleCode, System.Guid UserGuid, string OldValue, string NewValue) {
            this.AddAuditTrailAsync(ModuleCode, UserGuid, OldValue, NewValue, null);
        }
        
        /// <remarks/>
        public void AddAuditTrailAsync(string ModuleCode, System.Guid UserGuid, string OldValue, string NewValue, object userState) {
            if ((this.AddAuditTrailOperationCompleted == null)) {
                this.AddAuditTrailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAuditTrailOperationCompleted);
            }
            this.InvokeAsync("AddAuditTrail", new object[] {
                        ModuleCode,
                        UserGuid,
                        OldValue,
                        NewValue}, this.AddAuditTrailOperationCompleted, userState);
        }
        
        private void OnAddAuditTrailOperationCompleted(object arg) {
            if ((this.AddAuditTrailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAuditTrailCompleted(this, new AddAuditTrailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAuditTrails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAuditTrails(CAuditTrial[] AuditTrialList) {
            object[] results = this.Invoke("AddAuditTrails", new object[] {
                        AuditTrialList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAuditTrailsAsync(CAuditTrial[] AuditTrialList) {
            this.AddAuditTrailsAsync(AuditTrialList, null);
        }
        
        /// <remarks/>
        public void AddAuditTrailsAsync(CAuditTrial[] AuditTrialList, object userState) {
            if ((this.AddAuditTrailsOperationCompleted == null)) {
                this.AddAuditTrailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAuditTrailsOperationCompleted);
            }
            this.InvokeAsync("AddAuditTrails", new object[] {
                        AuditTrialList}, this.AddAuditTrailsOperationCompleted, userState);
        }
        
        private void OnAddAuditTrailsOperationCompleted(object arg) {
            if ((this.AddAuditTrailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAuditTrailsCompleted(this, new AddAuditTrailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditTrailCommit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuditTrailCommit() {
            this.Invoke("AuditTrailCommit", new object[0]);
        }
        
        /// <remarks/>
        public void AuditTrailCommitAsync() {
            this.AuditTrailCommitAsync(null);
        }
        
        /// <remarks/>
        public void AuditTrailCommitAsync(object userState) {
            if ((this.AuditTrailCommitOperationCompleted == null)) {
                this.AuditTrailCommitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditTrailCommitOperationCompleted);
            }
            this.InvokeAsync("AuditTrailCommit", new object[0], this.AuditTrailCommitOperationCompleted, userState);
        }
        
        private void OnAuditTrailCommitOperationCompleted(object arg) {
            if ((this.AuditTrailCommitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditTrailCommitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuditTrailRollback", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AuditTrailRollback() {
            this.Invoke("AuditTrailRollback", new object[0]);
        }
        
        /// <remarks/>
        public void AuditTrailRollbackAsync() {
            this.AuditTrailRollbackAsync(null);
        }
        
        /// <remarks/>
        public void AuditTrailRollbackAsync(object userState) {
            if ((this.AuditTrailRollbackOperationCompleted == null)) {
                this.AuditTrailRollbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditTrailRollbackOperationCompleted);
            }
            this.InvokeAsync("AuditTrailRollback", new object[0], this.AuditTrailRollbackOperationCompleted, userState);
        }
        
        private void OnAuditTrailRollbackOperationCompleted(object arg) {
            if ((this.AuditTrailRollbackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditTrailRollbackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsAuthenticated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AuthenticationStatus IsAuthenticated(string username, string Password, string ApplicationCode, out System.Guid UserGuid) {
            object[] results = this.Invoke("IsAuthenticated", new object[] {
                        username,
                        Password,
                        ApplicationCode});
            UserGuid = ((System.Guid)(results[1]));
            return ((AuthenticationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string username, string Password, string ApplicationCode) {
            this.IsAuthenticatedAsync(username, Password, ApplicationCode, null);
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string username, string Password, string ApplicationCode, object userState) {
            if ((this.IsAuthenticatedOperationCompleted == null)) {
                this.IsAuthenticatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAuthenticatedOperationCompleted);
            }
            this.InvokeAsync("IsAuthenticated", new object[] {
                        username,
                        Password,
                        ApplicationCode}, this.IsAuthenticatedOperationCompleted, userState);
        }
        
        private void OnIsAuthenticatedOperationCompleted(object arg) {
            if ((this.IsAuthenticatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAuthenticatedCompleted(this, new IsAuthenticatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserHasLocationAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserHasLocationAccess(System.Guid UserGuid, string LocationCode) {
            object[] results = this.Invoke("UserHasLocationAccess", new object[] {
                        UserGuid,
                        LocationCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserHasLocationAccessAsync(System.Guid UserGuid, string LocationCode) {
            this.UserHasLocationAccessAsync(UserGuid, LocationCode, null);
        }
        
        /// <remarks/>
        public void UserHasLocationAccessAsync(System.Guid UserGuid, string LocationCode, object userState) {
            if ((this.UserHasLocationAccessOperationCompleted == null)) {
                this.UserHasLocationAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserHasLocationAccessOperationCompleted);
            }
            this.InvokeAsync("UserHasLocationAccess", new object[] {
                        UserGuid,
                        LocationCode}, this.UserHasLocationAccessOperationCompleted, userState);
        }
        
        private void OnUserHasLocationAccessOperationCompleted(object arg) {
            if ((this.UserHasLocationAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserHasLocationAccessCompleted(this, new UserHasLocationAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersWithRight", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OUser[] UsersWithRight(string Code, string LocationCode) {
            object[] results = this.Invoke("UsersWithRight", new object[] {
                        Code,
                        LocationCode});
            return ((OUser[])(results[0]));
        }
        
        /// <remarks/>
        public void UsersWithRightAsync(string Code, string LocationCode) {
            this.UsersWithRightAsync(Code, LocationCode, null);
        }
        
        /// <remarks/>
        public void UsersWithRightAsync(string Code, string LocationCode, object userState) {
            if ((this.UsersWithRightOperationCompleted == null)) {
                this.UsersWithRightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersWithRightOperationCompleted);
            }
            this.InvokeAsync("UsersWithRight", new object[] {
                        Code,
                        LocationCode}, this.UsersWithRightOperationCompleted, userState);
        }
        
        private void OnUsersWithRightOperationCompleted(object arg) {
            if ((this.UsersWithRightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersWithRightCompleted(this, new UsersWithRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(System.Guid Id) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        Id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(System.Guid Id) {
            this.GetUserNameAsync(Id, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(System.Guid Id, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        Id}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CApplication {
        
        private int idField;
        
        private System.Guid uniqueIdentifierField;
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UniqueIdentifier {
            get {
                return this.uniqueIdentifierField;
            }
            set {
                this.uniqueIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class OUser {
        
        private System.Guid userGuidField;
        
        private string userNameField;
        
        /// <remarks/>
        public System.Guid UserGuid {
            get {
                return this.userGuidField;
            }
            set {
                this.userGuidField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CAuditTrial {
        
        private string moduleCodeField;
        
        private System.Guid userGuidField;
        
        private string oldValueField;
        
        private string newValueField;
        
        /// <remarks/>
        public string ModuleCode {
            get {
                return this.moduleCodeField;
            }
            set {
                this.moduleCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UserGuid {
            get {
                return this.userGuidField;
            }
            set {
                this.userGuidField = value;
            }
        }
        
        /// <remarks/>
        public string OldValue {
            get {
                return this.oldValueField;
            }
            set {
                this.oldValueField = value;
            }
        }
        
        /// <remarks/>
        public string NewValue {
            get {
                return this.newValueField;
            }
            set {
                this.newValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum AuthenticationStatus {
        
        /// <remarks/>
        AccessGranted,
        
        /// <remarks/>
        NoApplicationAccess,
        
        /// <remarks/>
        InvalidUserOrPassword,
        
        /// <remarks/>
        UnknownError,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetActiveApplicationsCompletedEventHandler(object sender, GetActiveApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void HasRightCompletedEventHandler(object sender, HasRightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasRightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasRightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void HasRightsCompletedEventHandler(object sender, HasRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void UserHasApplicationAccessCompletedEventHandler(object sender, UserHasApplicationAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserHasApplicationAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserHasApplicationAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void UserHasApplicationsAccessCompletedEventHandler(object sender, UserHasApplicationsAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserHasApplicationsAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserHasApplicationsAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AddAuditTrailCompletedEventHandler(object sender, AddAuditTrailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAuditTrailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAuditTrailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AddAuditTrailsCompletedEventHandler(object sender, AddAuditTrailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAuditTrailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAuditTrailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AuditTrailCommitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AuditTrailRollbackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void IsAuthenticatedCompletedEventHandler(object sender, IsAuthenticatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAuthenticatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAuthenticatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthenticationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthenticationStatus)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid UserGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void UserHasLocationAccessCompletedEventHandler(object sender, UserHasLocationAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserHasLocationAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserHasLocationAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void UsersWithRightCompletedEventHandler(object sender, UsersWithRightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersWithRightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersWithRightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591